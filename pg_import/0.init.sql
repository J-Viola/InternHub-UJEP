GRANT ALL PRIVILEGES ON *.* TO 'internhub'@'%' WITH GRANT OPTION;

CREATE TABLE `pg_import`.`import` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NOT NULL,
  `description` TEXT NOT NULL,
  `created_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB;







CREATE TABLE Status (
	status_id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	status_code VARCHAR(50) UNIQUE,
	status_name VARCHAR(100),
	status_category VARCHAR(50),
	description TEXT
);

CREATE INDEX idx_status_category ON Status(status_category);

CREATE TABLE Role (
	role_id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	role_name VARCHAR(50) UNIQUE,
	description TEXT
);

CREATE TABLE "User" (
	user_id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	username VARCHAR(50) UNIQUE,
	password VARCHAR(255),
	email VARCHAR(255) UNIQUE,
	title_before VARCHAR(50),
	first_name VARCHAR(50),
	last_name VARCHAR(50),
	title_after VARCHAR(50),
	role_id INT REFERENCES Role(role_id),
	phone VARCHAR(15),
	date_joined TIMESTAMP,
	is_active BOOLEAN,
	profile_picture TEXT,
	field_of_study VARCHAR(100),
	year_of_study INT,
	stag_f_number INT UNIQUE,
	resume TEXT,
	additional_info TEXT,
	date_of_birth DATE,
	place_of_birth VARCHAR(100),
	street VARCHAR(100),
	street_number VARCHAR(10),
	zip_code VARCHAR(10),
	city VARCHAR(100),
	specialization VARCHAR(100)
);

CREATE INDEX idx_user_last_name ON "User"(last_name);
CREATE INDEX idx_user_date_joined ON "User"(date_joined);
CREATE INDEX idx_user_is_active ON "User"(is_active);

CREATE TABLE EmployerProfile (
	employer_id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	company_name VARCHAR(100),
	ico VARCHAR(15) UNIQUE,
	dic VARCHAR(15) UNIQUE,
	address TEXT,
	company_profile TEXT,
	approval_status_id INT REFERENCES Status(status_id)
);

CREATE INDEX idx_employer_company_name ON EmployerProfile(company_name);

CREATE TABLE Department (
	department_id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	department_name VARCHAR(100) UNIQUE,
	description TEXT
);

CREATE TABLE Subject (
	subject_id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	subject_code VARCHAR(50) UNIQUE,
	subject_name VARCHAR(100),
	department_id INT REFERENCES Department(department_id),
	hours_required INT
);

CREATE INDEX idx_subject_name ON Subject(subject_name);

CREATE TABLE DepartmentUserRole (
	id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	department_id INT REFERENCES Department(department_id),
	user_id INT REFERENCES "User"(user_id),
	role_id INT REFERENCES Role(role_id),
	UNIQUE(department_id, user_id, role_id)
);

CREATE TABLE EmployerUserRole (
	id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	employer_id INT REFERENCES EmployerProfile(employer_id),
	user_id INT REFERENCES "User"(user_id),
	UNIQUE(employer_id, user_id)
);

CREATE TABLE UserSubject (
	id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	user_id INT REFERENCES "User"(user_id),
	subject_id INT REFERENCES Subject(subject_id),
	role VARCHAR(50),
	UNIQUE(user_id, subject_id)
);

CREATE TABLE PracticeType (
	practice_type_id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	name VARCHAR(100) UNIQUE,
	coefficient FLOAT
);

CREATE TABLE Practice (
	practice_id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	employer_id INT REFERENCES EmployerProfile(employer_id),
	subject_id INT REFERENCES Subject(subject_id),
	title VARCHAR(100),
	description TEXT,
	responsibilities TEXT,
	available_positions INT,
	start_date DATE,
	end_date DATE,
	status_id INT REFERENCES Status(status_id),
	approval_status_id INT REFERENCES Status(status_id),
	contact_user_id INT REFERENCES "User"(user_id),
	is_active BOOLEAN,
	image_base64 TEXT,
	practice_type_id INT REFERENCES PracticeType(practice_type_id)
);

CREATE INDEX idx_practice_title ON Practice(title);
CREATE INDEX idx_practice_start_date ON Practice(start_date);
CREATE INDEX idx_practice_is_active ON Practice(is_active);

CREATE TABLE StudentPractice (
	student_practice_id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	user_id INT REFERENCES "User"(user_id),
	practice_id INT REFERENCES Practice(practice_id),
	application_date DATE,
	approval_status_id INT REFERENCES Status(status_id),
	progress_status_id INT REFERENCES Status(status_id),
	hours_completed INT,
	cancellation_reason TEXT,
	cancelled_by_user_id INT REFERENCES "User"(user_id),
	UNIQUE(user_id, practice_id)
);

CREATE INDEX idx_student_practice_application_date ON StudentPractice(application_date);

CREATE TABLE EmployerInvitation (
	invitation_id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	employer_id INT REFERENCES EmployerProfile(employer_id),
	user_id INT REFERENCES "User"(user_id),
	practice_id INT REFERENCES Practice(practice_id),
	submission_date DATE,
	expiration_date DATE,
	message TEXT,
	status_id INT REFERENCES Status(status_id)
);

CREATE INDEX idx_invitation_submission_date ON EmployerInvitation(submission_date);

CREATE TABLE PracticeUser (
	id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	practice_id INT REFERENCES Practice(practice_id),
	user_id INT REFERENCES "User"(user_id),
	UNIQUE(practice_id, user_id)
);

CREATE TABLE UploadedDocument (
	document_id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	practice_id INT REFERENCES Practice(practice_id),
	document_name VARCHAR(100),
	file_path VARCHAR(255),
	uploaded_at TIMESTAMP,
	document_type VARCHAR(50)
);

CREATE INDEX idx_uploaded_document_uploaded_at ON UploadedDocument(uploaded_at);

CREATE TABLE ActionLog (
	action_id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	user_id INT REFERENCES "User"(user_id),
	action_type VARCHAR(50),
	object_type VARCHAR(50),
	object_id INT,
	action_description TEXT,
	action_date TIMESTAMP
);

CREATE INDEX idx_actionlog_action_date ON ActionLog(action_date);
CREATE INDEX idx_actionlog_action_type ON ActionLog(action_type);